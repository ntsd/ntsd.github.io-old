const CACHE_NAMESPACE="main-",CACHE="main-precache-then-runtime",PRECACHE_LIST=["./","./offline.html","./js/jquery.min.js","./js/jquery.nav.min.js","./js/jquery.tagcloud.min.js","./js/ntsd-blog.min.js","./js/prism.min.js","./css/ntsd-blog.min.css","./css/prism.min.css","./img/post-bg-os-metro.jpg","./img/404-bg.jpg"],HOSTNAME_WHITELIST=[self.location.hostname,"ntsd.github.io","ntsd.dev","cdnjs.cloudflare.com"],DEPRECATED_CACHES=["precache-v1","runtime","main-precache-v1","main-runtime"],getCacheBustingUrl=e=>{var t=Date.now();return url=new URL(e.url),url.protocol=self.location.protocol,url.search+=(url.search?"&":"?")+"cache-bust="+t,url.href},isNavigationReq=e=>"navigate"===e.mode||"GET"===e.method&&e.headers.get("accept").includes("text/html"),endWithExtension=e=>Boolean(new URL(e.url).pathname.match(/\.\w+$/)),shouldRedirect=e=>isNavigationReq(e)&&"/"!==new URL(e.url).pathname.substr(-1)&&!endWithExtension(e),getRedirectUrl=e=>(url=new URL(e.url),url.pathname+="/",url.href);self.addEventListener("install",e=>{e.waitUntil(caches.open(CACHE).then(e=>e.addAll(PRECACHE_LIST).then(self.skipWaiting()).catch(e=>void 0)))}),self.addEventListener("activate",e=>{caches.keys().then(e=>Promise.all(e.filter(e=>DEPRECATED_CACHES.includes(e)).map(e=>caches.delete(e)))),e.waitUntil(self.clients.claim())});var fetchHelper={fetchThenCache:function(e){const t=fetch(e,{mode:"cors",credentials:"omit"}),s=t.then(e=>e.clone());return Promise.all([s,caches.open(CACHE)]).then(([t,s])=>t.ok&&s.put(e,t)).catch(e=>{}),t},cacheFirst:function(e){return caches.match(e).then(t=>t||this.fetchThenCache(e)).catch(e=>{})}};function sendMessageToAllClients(e){self.clients.matchAll().then(t=>{t.forEach(t=>{t.postMessage(e)})})}function sendMessageToClientsAsync(e){setTimeout(()=>{sendMessageToAllClients(e)},1e3)}function revalidateContent(e,t){return Promise.all([e,t]).then(([e,t])=>{const s=e.headers.get("last-modified"),n=t.headers.get("last-modified");s!==n&&sendMessageToClientsAsync({command:"UPDATE_FOUND",url:t.url})}).catch(e=>void 0)}self.addEventListener("fetch",e=>{if(HOSTNAME_WHITELIST.indexOf(new URL(e.request.url).hostname)>-1){if(shouldRedirect(e.request))return void e.respondWith(Response.redirect(getRedirectUrl(e.request)));if(e.request.url.indexOf("ys.static")>-1)return void e.respondWith(fetchHelper.cacheFirst(e.request.url));const t=caches.match(e.request),s=fetch(getCacheBustingUrl(e.request),{cache:"no-store"}),n=s.then(e=>e.clone());e.respondWith(Promise.race([s.catch(e=>t),t]).then(e=>e||s).catch(e=>caches.match("offline.html"))),e.waitUntil(Promise.all([n,caches.open(CACHE)]).then(([t,s])=>t.ok&&s.put(e.request,t)).catch(e=>{})),isNavigationReq(e.request)&&e.waitUntil(revalidateContent(t,n))}});